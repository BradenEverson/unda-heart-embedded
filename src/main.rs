use std::{error::Error, time::Instant};

use esp_idf_svc::hal::{adc::{attenuation, config::Config, AdcChannelDriver, AdcDriver}, delay::FreeRtos, gpio::{Level, PinDriver}, peripherals::Peripherals};
use esp_idf_unda::network::{activations::Activations, network::Network};

fn main() -> Result<(), Box<dyn Error>> {
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_svc::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();

    //Set IO
    let peripherals = Peripherals::take()?;

    let mut adc = AdcDriver::new(peripherals.adc1, &Config::new().calibration(true))?;
    let mut pulse_sensor: AdcChannelDriver<{attenuation::DB_11}, _> = AdcChannelDriver::new(peripherals.pins.gpio4)?;

    let mut led = PinDriver::output(peripherals.pins.gpio12)?; 
    

    //Serialized models can be loaded here either from explicity Unda string or file if board has an SD card slot
    let model_str = "D|8|4|-7.8210874 -6.360595 -0.14745522 4.480169 -0.7952573 0.14238156 6.0407743 2.6699448 -5.6121063 0.9879691 3.3065674 5.1555114 -1.3957433 1.4931473 6.4542017 -0.5790457 -1.1193731 -5.210002 -3.6512837 0.43595082 0.24163085 -2.9473007 -3.5734003 -2.2308037 -6.8776746 -4.4187784 -1.1159856 -0.7548519 -0.65336204 6.829385 2.5147586 3.2972167|0.07984614 -0.10107517 0.8034544 0.022575617 -0.4141817 -0.7156911 0.791512 0.23366475#D|32|8|7.8249574 -5.2924256 -30.76309 -10.291379 8.989553 2.3271587 9.006406 -7.433475 21.841148 -35.469173 -34.591507 -34.012276 33.472145 32.18295 38.58994 -40.404858 11.554581 -6.614353 24.288404 -2.2045453 5.794 8.4250345 8.570297 -3.2297966 3.4367716 -9.870098 54.891235 -4.9537377 3.194512 2.375049 6.350774 3.3236244 16.940985 -24.69422 24.852058 -18.727373 18.598011 21.044115 21.471878 -17.199764 1.3077898 -3.9137 -2.7729905 -9.644199 11.729281 11.222046 9.342608 -4.6777387 -21.998564 28.009497 0.67920315 29.402851 -28.201797 -26.198954 -27.470047 32.92035 40.998047 -37.91979 -22.64334 -39.73164 37.735836 36.87639 42.293694 -40.17155 -25.707718 26.653973 27.278946 27.95908 -28.370419 -30.919325 -26.3259 28.420082 -34.447575 38.719814 31.953156 37.546883 -35.07387 -39.085938 -36.959236 34.453037 -41.82792 46.701263 44.15488 50.962116 -51.161816 -48.85003 -51.55201 49.797802 -1.0940747 -5.2832007 -15.4578705 -2.6597092 2.9999778 1.9884413 6.357162 -3.351118 -10.875761 21.26432 87.34222 15.688815 -18.06842 -21.377203 -20.63824 20.518175 -20.776104 18.812996 11.893482 14.336297 -14.811014 -20.264523 -17.433481 16.540535 -2.9005709 1.210385 -39.964703 3.2745004 -0.84402275 -3.5099442 -0.27472907 -1.1088574 -27.9832 30.94548 54.39292 30.42043 -28.94577 -31.195778 -29.955833 29.272408 -33.99983 26.662104 -10.072587 31.046627 -25.83181 -29.007376 -28.591581 27.482834 25.977287 -19.820202 0.33992594 -20.588243 15.825855 21.663277 15.250202 -16.20726 35.63229 -30.466497 -37.74005 -27.846382 28.163944 28.931162 34.873615 -33.70353 4.7109704 8.013398 16.38499 12.235467 -6.005234 -8.900016 -11.418449 3.5882325 3.8851438 -2.7713625 -8.977244 -6.356296 4.102315 -3.4808307 4.8533716 0.34122393 -3.2381465 -3.4275162 3.8940942 -1.3372786 7.038218 1.2327724 1.0146139 0.6994392 -8.937481 5.450413 -15.05876 5.890239 -8.15968 -4.8557873 -5.216988 7.0040946 34.74456 -39.53227 -21.129719 -42.209003 35.851692 37.690754 38.004208 -30.556181 -29.427383 20.929993 46.19935 19.330093 -18.39856 -18.565636 -19.520452 21.267452 32.542717 -31.912098 -49.007347 -34.108055 35.35101 38.035164 35.511387 -35.819138 9.012751 -7.1237693 24.602644 -2.692894 4.4674306 4.001179 7.0188155 1.2035025 -26.65118 27.287928 12.174917 25.991539 -27.532063 -26.739212 -21.775991 24.35141 3.7726953 -10.032684 -9.805188 -11.508312 12.798238 14.633927 13.485448 -11.271033 -27.865812 31.942537 62.05461 31.259901 -29.340845 -32.3076 -29.54275 35.948082 -37.708588 28.69112 5.061741 30.953005 -24.745699 -27.053886 -27.589191 29.66183 0.6421785 -2.559029 -9.281226 0.47841284 -0.75804967 2.3832135 0.58171326 -0.9652064|-5.0038776 -35.22037 -6.012926 -5.012922 -21.343094 -9.388033 28.937012 -40.390804 27.359814 35.82002 48.945705 -3.0321496 18.694603 19.71068 1.4653108 30.32609 29.92435 -19.021658 -29.150414 7.504485 -3.6421874 -2.5521362 6.80686 -38.880318 20.251455 -36.247257 -3.8419771 25.126448 -11.455558 31.978733 28.824345 -0.42795098#D|16|32|25.452147 -33.80163 -228.05716 -110.413124 2.9438884 -58.301327 14.1912 -29.226625 162.12915 -59.724106 73.547844 151.66931 -9.775757 28.300463 -119.3405 -118.840614 53.295982 31.509165 -32.75594 -157.76163 91.65271 -128.31033 -82.19162 -68.36453 35.753525 -51.556988 -78.79557 -76.626335 -82.07 -3.501956 30.19145 -181.33954 50.087234 10.747491 -137.10426 16.185003 116.40519 -59.52889 -87.89067 -7.5640807 -17.723186 -81.24357 -4.723677 62.495834 115.85411 119.66959 -31.993423 71.54242 -254.5392 -39.572716 37.433323 -33.813965 48.269707 29.518536 34.063328 90.93208 99.19687 -86.85174 3.3763864 -63.896046 -25.784544 -21.916618 31.952305 21.534681 18.356394 -2.5963328 -26.448454 -156.73288 85.47572 99.78779 -10.299415 -22.66037 38.291092 -61.091263 -67.146194 147.00475 -119.36176 136.54533 -100.85162 93.01149 56.23943 -204.13153 -30.718533 90.494484 -94.829216 11.69942 -45.781467 30.596567 -48.48884 -76.49713 51.53245 -73.659706 65.34442 -131.28781 38.98066 -31.88723 -24.675869 89.173836 -206.69228 46.819885 -140.00659 -48.56001 14.311325 42.716927 -25.508003 23.784927 176.66736 36.23907 148.77058 -80.61061 -154.07901 90.22112 -83.60034 15.29242 14.501126 -27.529005 -16.376139 -146.54602 3.2421834 20.028858 -34.505867 -73.350494 23.154879 -16.69309 -191.8303 -16.639729 131.6172 -46.674297 -12.1918335 -18.637062 57.00095 -51.438232 21.49911 -21.687336 -33.238224 -71.3699 195.19356 116.23964 292.78204 -86.40588 0.3900065 92.11838 -57.120472 113.99549 -103.090744 -67.77992 74.45184 128.78227 31.580677 14.528167 142.03107 -91.485855 129.14375 -300.34586 -129.66785 40.754967 46.595627 44.28269 -24.91566 30.587017 -68.22363 102.70758 -147.46046 -134.12257 0.8852811 -52.50786 128.90102 -93.183685 73.21807 -4.4853687 16.404268 -3.0910316 43.416195 33.72638 -100.14358 -117.45458 48.21153 79.19429 -96.50863 77.55599 -63.151894 -24.088053 -61.909138 76.99429 -91.10042 61.737015 -66.1704 -186.77635 -43.452995 22.553242 -85.09724 40.981403 64.75672 -134.68312 9.071939 55.81418 116.52374 99.14445 34.76566 -77.95067 15.33417 85.753105 -96.186165 -74.321655 -34.976307 -51.97695 -32.19722 27.746431 156.78786 153.10576 -250.41965 -165.38438 40.715973 -19.638184 -41.2716 17.316502 -18.109095 -107.2499 41.917316 40.868908 19.66427 57.68869 69.10887 84.92166 46.763294 109.98884 15.425992 11.071152 -52.020966 -174.62326 130.81383 -100.80527 27.40314 176.36311 -66.73416 92.39771 67.115585 -67.75605 1.3385711 -19.331377 81.946724 -84.176414 -84.04514 -113.60073 64.53615 6.611836 59.2625 -148.92868 190.44354 -9.390394 -71.5799 72.09437 126.60364 -40.804012 -25.971237 -18.711294 102.311424 56.283813 -2.664077 -9.687292 32.293518 76.486595 -148.18846 132.63312 -124.500824 -317.23862 -65.828476 -17.69028 -143.675 -25.02842 -47.57107 -58.57575 133.82285 104.61661 85.04721 8.770514 93.6276 34.553043 -19.847055 150.90013 -53.638283 102.80236 -76.184364 -9.669822 66.05292 -99.266624 -65.36575 -129.96509 -138.61038 -43.962162 -60.430588 132.41148 27.11679 69.88991 -163.00284 66.06568 74.060074 10.911309 -116.738495 152.77206 83.42318 25.254469 57.464966 21.753937 34.145374 -63.607414 -102.018135 -186.79704 -33.568134 -135.33731 166.7367 49.78826 97.44354 -70.186195 -41.800964 97.17652 48.024506 -7.127042 88.25707 101.8101 -28.747198 -169.9064 69.627304 -13.033339 49.968784 -1.5220475 67.52305 -125.089066 65.420425 -26.585752 109.51586 -41.131104 -45.685303 188.86726 56.971222 20.279171 -160.14046 28.543877 -36.37748 28.49092 20.615746 11.639515 17.93703 -38.498352 56.2101 50.3436 -50.080574 88.96679 -130.2505 26.218842 -40.790222 42.371895 -65.665184 -4.8318844 90.11863 -105.30788 16.147894 47.238678 92.80741 64.76199 -126.45485 34.0873 -77.251854 -27.755857 71.88082 42.984207 8.47565 7.556135 -112.597725 -50.10286 87.508484 -154.25885 -94.82519 -0.6113084 13.4145975 148.73872 -89.71993 -11.031085 91.552826 -74.2729 194.63564 161.32637 59.452675 95.2442 -2.3626406 -79.81807 -44.327675 66.97355 142.75923 -33.30137 54.098446 25.176435 100.56201 -73.411606 -37.88425 -127.22928 -199.88545 -74.53517 12.301932 -72.18174 -101.40459 80.38059 -35.934082 -87.10556 89.90391 -56.41265 -184.0902 -208.9991 85.11939 -77.324715 -47.892902 35.76463 -91.96679 -15.555186 -19.319456 -38.41643 -181.79309 -51.321083 105.82525 -33.56207 78.12973 153.1977 11.721985 38.69906 27.903032 -156.4607 33.09238 -63.318726 -63.12403 74.254166 10.898098 -34.70419 12.387138 57.212498 99.60538 90.49257 -16.634043 -9.61142 131.44278 -57.196384 55.38233 -123.84045 82.39173 -28.209599 -90.40506 -42.449 -217.01859 55.26897 25.96265 131.51445 -92.48927 26.855455 -56.94228 68.74888 -96.20329 36.81267 -117.62856 52.689594 -115.49649 -4.7427664 9.755092 46.43548 -1.9138172 -64.11812 -48.97528 90.15586 159.9867 -68.706406 109.17151 -35.08021 187.87285 -52.71567 -56.668564 198.66725 87.02622 -63.417606 82.75836 10.265572 104.72101 128.99454 146.93735 63.33722 -96.474144 30.678112 137.43884 -67.157974 -1.8356144 -80.12574 -24.782122 168.39186 9.057196 8.943587 -46.748055 10.5515175 -63.39022 -38.329952 -81.26582 -80.56925 -63.136566 32.12258 5.163301 76.29046 -12.501817 -116.31389 74.31223 -43.273422 -47.55828 -97.977425 -20.308054 44.910484 -86.15885 -41.37631|115.32125 -49.94362 -72.51383 40.229023 6.7267413 -79.370995 88.66083 -32.572533 66.212524 30.923216 18.107626 -31.270706 -63.386314 -21.008392 -20.181526 51.104866#D|1|16|-7.2060366 17.686592 4.517013 -6.2920427 -42.63054 -8.600226 -21.45958 -23.411577 59.895504 -9.504524 -27.83137 4.1242423 -18.931057 29.512821 19.800533 -11.638378|127.04872";
    //age - 'hyper'ish parameter for age of patient
    //sex
    let age = 19f32;
    let sex = 0f32;

    let mut model = Network::deserialize_unda_fmt_string(model_str.into(), Activations::SIGMOID); 

    let threshold = 3000;
    let mut beat_detected = false;
    let mut last_beat_time = Instant::now();
    let mut bpm;
    let mut led_state = Level::Low;


    //Collect params from IO and generate inferences!
    loop {
        let in_val = adc.read(&mut pulse_sensor)?;

        if in_val > threshold && !beat_detected {
            beat_detected = true;
            let curr_time = Instant::now();
            let beat_interval = curr_time.duration_since(last_beat_time);
            last_beat_time = curr_time;

            if beat_interval.as_secs_f32() > 0.0 {
                bpm = 60.0 / beat_interval.as_secs_f32();
                if bpm < 220f32 {
                    log::info!("BPM: {}", bpm);
                    
                    led_state = match led_state {
                        Level::Low => Level::High,
                        _ => Level::Low
                    };
                    led.set_level(led_state)?;

                    //Perform inference
                    log::info!("{} - {} - {} - {}", age / 100f32, sex, bpm / 200f32, beat_interval.as_secs_f32());
                    let data = vec![age / 100f32, sex, bpm / 400f32, beat_interval.as_secs_f32()];
                    
                    let heart_attack_risk = model.predict(&data)[0];

                    log::info!("{}", heart_attack_risk);

                    if heart_attack_risk >= 0.85 {
                        //Heart attack likely
                        loop {
                            for _ in 0..10{
                                led.set_high()?;
                                FreeRtos::delay_ms(50);
                                led.set_low()?;
                                FreeRtos::delay_ms(50);
                            }
                        }
                    }
                }
            }
        } else {
            beat_detected = false;
        }


        //Delay timer
        FreeRtos::delay_ms(5);
    }
}
